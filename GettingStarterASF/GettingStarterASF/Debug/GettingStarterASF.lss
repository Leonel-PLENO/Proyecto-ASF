
GettingStarterASF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000800  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003df  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000cdd  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000008c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0001181c  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000016b  00000000  00000000  0001335c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000070  00000000  00000000  000134c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000434d  00000000  00000000  00013537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	18 d0       	rcall	.+48     	; 0xca <main>
  9a:	31 c0       	rjmp	.+98     	; 0xfe <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <sysclk_init>:
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 93 64 00 	sts	0x0064, r24
  a4:	80 93 65 00 	sts	0x0065, r24
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
  a8:	80 91 61 00 	lds	r24, 0x0061
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	59 f0       	breq	.+22     	; 0xc6 <sysclk_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
  b0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
  b2:	f8 94       	cli
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  b4:	5f 93       	push	r21
  b6:	50 e8       	ldi	r21, 0x80	; 128
  b8:	50 93 61 00 	sts	0x0061, r21
  bc:	53 e0       	ldi	r21, 0x03	; 3
  be:	50 93 61 00 	sts	0x0061, r21
  c2:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  c4:	8f bf       	out	0x3f, r24	; 63
  c6:	08 95       	ret

000000c8 <board_init>:
#include <board.h>
#include <compiler.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <main>:
#define LED_RED		IOPORT_CREATE_PIN(PORTA, 6)

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
  ca:	fe df       	rcall	.-4      	; 0xc8 <board_init>
	sysclk_init();
  cc:	e8 df       	rcall	.-48     	; 0x9e <sysclk_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  ce:	0d 9a       	sbi	0x01, 5	; 1
  d0:	0e 9a       	sbi	0x01, 6	; 1
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  d2:	16 9a       	sbi	0x02, 6	; 2
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  d4:	15 98       	cbi	0x02, 5	; 2
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
  d6:	70 e2       	ldi	r23, 0x20	; 32
  d8:	60 e4       	ldi	r22, 0x40	; 64
  da:	55 e8       	ldi	r21, 0x85	; 133
  dc:	45 e4       	ldi	r20, 0x45	; 69
  de:	31 e0       	ldi	r19, 0x01	; 1
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	70 b9       	out	0x00, r23	; 0
  e4:	60 b9       	out	0x00, r22	; 0
  e6:	85 2f       	mov	r24, r21
  e8:	94 2f       	mov	r25, r20
  ea:	a3 2f       	mov	r26, r19
  ec:	b2 2f       	mov	r27, r18
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	a1 05       	cpc	r26, r1
  f8:	b1 05       	cpc	r27, r1
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x24>
  fc:	f2 cf       	rjmp	.-28     	; 0xe2 <main+0x18>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
